{"version":3,"sources":["lang/sv.ts","lang/parser.ts","lang/env.ts","lang/base-evaluator.ts","lang/application-evaluator.ts","lang/begin-evaluator.ts","lang/breakpoint-evaluator.ts","lang/call-cc-evaluator.ts","lang/cond-evaluator.ts","lang/define-evaluator.ts","lang/if-evaluator.ts","lang/lambda-evaluator.ts","lang/let-evaluator.ts","lang/quote-evaluator.ts","lang/self-evaluator.ts","lang/variable-evaluator.ts","lang/assignment-evaluator.ts","lang/interpreter.ts","editor/debugger-state.ts","editor/samples.tsx","editor/toolbar.tsx","editor/scopes.tsx","editor/stacktrace.tsx","editor/logger.ts","editor/new-line-text.tsx","editor/editor.tsx","App.tsx","index.tsx"],"names":["Sv","Object","_Users_encse_projects_mini_scheme_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","ilineStart","icolStart","ilineEnd","icolEnd","_Users_encse_projects_mini_scheme_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_3__","key","value","toString","first","last","SvAtom","_Sv","_Users_encse_projects_mini_scheme_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_0__","_super","_Users_encse_projects_mini_scheme_node_modules_babel_runtime_helpers_esm_createSuper__WEBPACK_IMPORTED_MODULE_1__","apply","arguments","sv","SvCons","matches","SvContinuable","_Sv2","_super2","cont","val","_this","call","Error","cast","SvBreakpoint","_Sv3","_super3","_val","_env","_this2","node","SvProcedure","_Sv4","_super4","name","delegate","_this3","concat","_Sv5","_super5","_car","_cdr","_this4","toStringI","toDisplayString","dgDisplay","st","rv","isNil","car","cdr","_len","length","rvs","Array","_key","listFromRvArray","res","Nil","j","cons","newCar","newCdr","cddr","cdddr","cddddr","lst","l","SvNumber","SvBool","_Sv6","_super6","_this5","isTrue","False","True","f","SvString","_Sv7","_super7","_this6","JSON","stringify","_Sv8","_super8","_this7","SvSymbol","_Sv9","_super9","_this8","TokenKind","Parser","_Users_encse_projects_mini_scheme_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","regexSymbol","regexNumber","regexString","regexWhiteSpace","regexBoolean","regexComment","tokens","itoken","_Users_encse_projects_mini_scheme_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","getTokens","filter","token","kind","WhiteSpace","Comment","lastToken","push","Token","EOF","accept","parseExpression","tokenKind","currentToken","nextToken","Quote","svBody","withSourceInfo","Symbol","BooleanLit","fromBoolean","NumberLit","eval","StringLit","LParen","tokenStart","exprs","RParen","tokenEnd","iline","icol","ch","test","exec","substr","lines","replace","split","StackFrame","_sv","classCallCheck","createClass","getParentStackFrame","Env","envParent","svSymbolProcedure","undefined","parentStackFrame","obj","hasOwnProperty","get","set","BaseEvaluator","stepCount","step","evaluators","env","i","evaluate","lastSv","loop","nextExprs","tag","ApplicationEvaluator","evaluator","getOperator","operator","evaluateArgs","getArguments","args","evalCall","args0","evaluatedArgs","evaluatedArgsLast","evaluatedArg","setCar","setCdr","stackFrameCurrent","expr","BeginEvaluator","isTaggedList","evaluateList","getBeginActions","BreakpointEvaluator","CallCCEvaluator","getLambda","lambda","listFromRvs","createCcProcedure","cadr","arg","CondEvaluator","cond","clause","clauses","isCondElseClause","getCondActions","svCond","nextClauses","getCondClauses","DefineEvaluator","getHead","getFunctionName","makeProc","getLambdaParameters","getLambdaBody","define","getValue","svValue","getVariable","caddr","envClosure","params","body","stackFrame","newEnv","paramsT","parameter","IfEvaluator","getIfPredicate","getIfConsequent","getIfAlternative","cadddr","LambdaEvaluator","proc","LetEvaluator","isLet","isLetStar","isLetrec","letEnv","defs","getBody","def","svSymbol","getDefs","setOrDefine","defsT","QuoteEvaluator","SelfEvaluator","VariableEvaluator","AssignmentEvaluator","Interpreter","log","parse","_","__","Math","min","max","abs","lengthI","not","and","or","msg","answer","parseInt","prompt","setEvaluators","setStepCount","getCurrentStackFrame","debuggerState","currentStackFrameIndex","parent","Samples","props","options","samples","map","sample","text","trim","react_default","a","createElement","className","onChange","event","onSampleSelected","target","selectedIndex","Toolbar","onRun","onClick","onPause","onStop","onStep","onContinue","samples_Samples","Scopes","scopes","getNames","getEnvParent","Stacktrace","stackFrameIndex","frameElements","_loop","currentStackFrame","getSvSymbolProcedure","_step","_iterator","createForOfIteratorHelper","s","n","done","param","err","e","classes","onStackFrameSelect","Logger","output","NewLineText","newText","str","Editor","_React$PureComponent","inherits","createSuper","setSampleIndex","index","_this$state$samples$i","stop","setState","program","state","currentSampleIndex","run","stepInterpreter","objectSpread2","pause","setStackFrameIndex","edit","interpreter","logger","clear","evaluateString","ex","console","editorRef","React","createRef","_ref","asyncToGenerator","regenerator_default","mark","_callee","url","response","wrap","_context","prev","next","sampleUrls","fetch","sent","t0","t1","t2","finish","abrupt","fetchSamples","then","_this$state","setTimeout","_editorRef$current","markers","startRow","endRow","startCol","endCol","type","current","editor","gotoLine","id","toolbar_Toolbar","lib_default","ref","mode","theme","editorProps","$blockScrolling","showGutter","width","height","new_line_text_NewLineText","stacktrace_Stacktrace","scopes_Scopes","PureComponent","App","Fragment","href","editor_Editor","rootElement","document","getElementById","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.ac6c4f73.chunk.js","sourcesContent":["import BaseEvaluator from \"./base-evaluator\";\r\nimport { Env, StackFrame } from \"./env\";\r\nimport { Cont } from \"./ievaluator\";\r\nimport { ISourceInfo } from \"./parser\";\r\n\r\nexport class Sv implements ISourceInfo {\r\n\r\n    ilineStart: number;\r\n    icolStart: number;\r\n    ilineEnd: number;\r\n    icolEnd: number;\r\n\r\n    public toDisplayString(): string {\r\n        return this.toString();\r\n    }\r\n\r\n    public withSourceInfo(first: ISourceInfo, last: ISourceInfo):Sv {\r\n        this.ilineStart = first.ilineStart;\r\n        this.icolStart = first.icolStart;\r\n        this.ilineEnd = last.ilineEnd;\r\n        this.icolEnd = last.icolEnd;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class SvAtom extends Sv {\r\n    public static matches(sv: Sv) : sv is SvAtom { return !SvCons.matches(sv); }\r\n}\r\n\r\nexport class SvContinuable extends Sv {\r\n    public constructor(private cont: Cont, private val: Sv) { super(); }\r\n\r\n    public static matches(sv: Sv) : sv is SvContinuable { return sv instanceof SvContinuable; }\r\n\r\n    public static cast(sv: Sv): SvContinuable {\r\n        if (!SvContinuable.matches(sv)) throw new Error(\"Cont expected\");\r\n        return sv as SvContinuable;\r\n    }\r\n    public static call(sv: Sv) {\r\n        return SvContinuable.cast(sv).cont((sv as SvContinuable).val);\r\n    }\r\n}\r\nexport class SvBreakpoint extends Sv {\r\n    public constructor(public _val: () => Sv, private _env:Env) { super(); }\r\n\r\n    public static matches(node: Sv): node is SvBreakpoint { return node instanceof SvBreakpoint; }\r\n\r\n    public static cast(sv: Sv): SvBreakpoint {\r\n        if (!SvBreakpoint.matches(sv)) throw new Error(\"Breakpoint expected\");\r\n        return sv as SvBreakpoint;\r\n    }\r\n\r\n    public env(): Env {\r\n        return this._env;\r\n    } \r\n\r\n    public val(): () => Sv {\r\n        return this._val;\r\n    }\r\n\r\n    public toString(): string {\r\n        return \"T(\" + this._val.toString()+\")\";\r\n    }\r\n\r\n    public toDisplayString(): string {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport class SvProcedure extends Sv {\r\n\r\n    constructor(\r\n        readonly name: SvSymbol, \r\n        public delegate: (args: Sv, stackFrame: StackFrame, evaluator: BaseEvaluator, cont: Cont) => Sv\r\n    ) {\r\n        super();\r\n    }\r\n\r\n    public toString(): string {\r\n        return `(fn ${this.name})`;\r\n    }\r\n\r\n    public static matches(sv: Sv): sv is SvProcedure {\r\n        return sv instanceof SvProcedure;\r\n    }\r\n}\r\n\r\nexport class SvCons extends Sv {\r\n    public constructor(private _car: Sv, private _cdr: Sv) { super(); }\r\n\r\n    public static cons(car:Sv, cdr:Sv) { return new SvCons(car, cdr); }\r\n    public static Nil = new SvCons(null, null);\r\n\r\n    public static listFromRvs(...rvs: Sv[]): Sv {\r\n        return SvCons.listFromRvArray(rvs);\r\n    }\r\n\r\n    public static listFromRvArray(rvs: Sv[]) {\r\n        let res = SvCons.Nil;\r\n        for (let j = rvs.length - 1; j >= 0; j--)\r\n            res = new SvCons(rvs[j], res);\r\n        return res;\r\n    }\r\n\r\n    public static matches(node: Sv) : node is SvCons {\r\n            return node instanceof SvCons;\r\n    }\r\n\r\n    public static isNil(node: Sv) {\r\n        return node === SvCons.Nil || (SvCons.matches(node) && SvCons.car(node) === null && SvCons.cdr(node) === null);\r\n    }\r\n\r\n    public static cast(sv: Sv): SvCons {\r\n        if (!SvCons.matches(sv)) throw new Error(\"Cons expected\");\r\n        return sv as SvCons;\r\n    }\r\n\r\n    public static car(node: Sv) {\r\n        return SvCons.cast(node)._car;\r\n    }\r\n\r\n    public static cdr(node: Sv) {\r\n        return SvCons.cast(node)._cdr;\r\n    }\r\n\r\n    static setCar(cons: Sv, newCar: Sv) {\r\n        SvCons.cast(cons)._car = newCar;\r\n        return cons;\r\n    }\r\n\r\n    static setCdr(cons: Sv, newCdr: Sv) {\r\n        SvCons.cast(cons)._cdr = newCdr;\r\n        return cons;\r\n    }\r\n    public static cadr(node: Sv) {\r\n        return this.car(this.cdr(node));\r\n    }\r\n\r\n    public static cddr(node: Sv) {\r\n        return this.cdr(this.cdr(node));\r\n    }\r\n\r\n    public static caddr(node: Sv) {\r\n        return this.car(this.cddr(node));\r\n    }\r\n\r\n    public static cdddr(node: Sv) {\r\n        return this.cdr(this.cddr(node));\r\n    }\r\n\r\n    public static cddddr(node: Sv) {\r\n        return this.cdr(this.cdddr(node));\r\n    }\r\n\r\n    public static cadddr(node: Sv) {\r\n        return this.car(this.cdddr(node));\r\n    }\r\n    public static caddddr(node: Sv) {\r\n        return this.car(this.cddddr(node));\r\n    }\r\n    public static lengthI(lst: Sv) {\r\n        let l = 0;\r\n        while (!this.isNil(lst)) {\r\n            l++;\r\n            lst = this.cdr(lst);\r\n        }\r\n        return new SvNumber(l);\r\n    }\r\n\r\n    public toDisplayString(): string {\r\n        return this.toStringI(sv => sv.toDisplayString());\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.toStringI(sv => sv.toString());\r\n    }\r\n\r\n    public toStringI(dgDisplay:(sv:Sv)=>string): string {\r\n        let st = '(';\r\n        let first = true;\r\n\r\n        var rv: Sv = this;\r\n        while (!SvCons.isNil(rv)) {\r\n            if (!first)\r\n                st += \" \";\r\n\r\n            if (SvCons.matches(rv)) {\r\n                st += dgDisplay(SvCons.car(rv));\r\n                rv = SvCons.cdr(rv);\r\n                if (SvAtom.matches(rv)) {\r\n                    st += \" . \" + dgDisplay(rv);\r\n                    break;\r\n                }\r\n            } else {\r\n                st += dgDisplay(rv);\r\n                break;\r\n            }\r\n            first = false;\r\n\r\n        }\r\n        st += ')';\r\n        return st;\r\n    }\r\n\r\n}\r\n\r\nexport class SvBool extends Sv {\r\n    public static True = new SvBool(true);\r\n    public static False = new SvBool(false);\r\n    constructor(public _val: boolean) { super(); }\r\n\r\n    public static matches(node: Sv) : node is SvBool { return node instanceof SvBool; }\r\n\r\n    public static isTrue(node: Sv) {\r\n        return SvBool.matches(node) && SvBool.val(node);\r\n    }\r\n\r\n    public static isFalse(node: Sv) {\r\n        return SvBool.matches(node) && !SvBool.val(node);\r\n    }\r\n\r\n    public static val(sv: Sv) {\r\n        return SvBool.cast(sv)._val;\r\n    }\r\n\r\n    public static cast(sv: Sv): SvBool {\r\n        if (!SvBool.matches(sv)) throw new Error(\"bool expected\");\r\n        return sv as SvBool;\r\n    }\r\n\r\n    public toDisplayString(): string {\r\n        return this.toString();\r\n    }\r\n\r\n    public toString(): string {\r\n        return this._val ? \"#t\" : \"#f\";\r\n    }\r\n\r\n    static not(car: Sv) {\r\n        return this.isTrue(car) ? SvBool.False : SvBool.True;\r\n    }\r\n\r\n    static and(lst: Sv) {\r\n        while (!SvCons.isNil(lst)) {\r\n            if (!this.isTrue(SvCons.car(lst)))\r\n                return SvBool.False;\r\n\r\n            lst = SvCons.cdr(lst);\r\n        }\r\n\r\n        return SvBool.True;\r\n    }\r\n\r\n    static or(lst: Sv) {\r\n        while (!SvCons.isNil(lst)) {\r\n            if (this.isTrue(SvCons.car(lst)))\r\n                return SvBool.True;\r\n\r\n            lst = SvCons.cdr(lst);\r\n        }\r\n\r\n        return SvBool.False;\r\n    }\r\n\r\n    public static fromBoolean(f: boolean) {\r\n        return f ? SvBool.True : SvBool.False;\r\n    }\r\n}\r\n\r\nexport class SvString extends Sv {\r\n    public constructor(public _val: string) { super(); }\r\n\r\n    public static matches(node: Sv) : node is SvString { return node instanceof SvString; }\r\n\r\n    public static val(sv: Sv) {\r\n        return SvString.cast(sv)._val;\r\n    }\r\n\r\n    public static cast(sv: Sv): SvString {\r\n        if (!SvString.matches(sv)) throw new Error(\"string expected\");\r\n        return sv as SvString;\r\n    }\r\n\r\n    public toDisplayString(): string {\r\n        return this._val;\r\n    }\r\n\r\n    public toString(): string {\r\n        return JSON.stringify(this._val);\r\n    }\r\n}\r\n\r\nexport class SvNumber extends Sv {\r\n    public constructor(public _val: number) { super(); }\r\n\r\n    public static matches(node: Sv) : node is SvNumber { return node instanceof SvNumber; }\r\n\r\n    public static val(node: Sv) {\r\n        return SvNumber.cast(node)._val;\r\n    }\r\n\r\n    public static cast(sv: Sv): SvNumber {\r\n        if (!SvNumber.matches(sv)) throw new Error(\"Number expected\");\r\n        return sv as SvNumber;\r\n    }\r\n\r\n    public toDisplayString(): string {\r\n        return this.toString();\r\n    }\r\n\r\n\r\n    public toString(): string {\r\n        return \"\" + this._val;\r\n    }\r\n}\r\n\r\nexport class SvSymbol extends Sv {\r\n    public constructor(public _val: string) { super(); }\r\n\r\n    public static matches(node: Sv) : node is SvSymbol { return node instanceof SvSymbol; }\r\n\r\n    public static val(node: Sv) {\r\n        return SvSymbol.cast(node)._val;\r\n    }\r\n\r\n    public static cast(sv: Sv): SvSymbol {\r\n        if (!SvSymbol.matches(sv)) throw new Error(\"Symbol expected\");\r\n        return sv as SvSymbol;\r\n    }\r\n\r\n    public toDisplayString(): string {\r\n        return this.toString();\r\n    }\r\n\r\n    public toString(): string {\r\n        return this._val;\r\n    }\r\n\r\n    \r\n}","import { SvCons, Sv, SvSymbol, SvBool, SvNumber, SvString } from \"./sv\";\r\n\r\nenum TokenKind {\r\n    WhiteSpace,\r\n    BooleanLit,\r\n    LParen,\r\n    RParen,\r\n    Symbol,\r\n    NumberLit,\r\n    Quote,\r\n    StringLit,\r\n    Comment,\r\n    EOF\r\n}\r\n\r\nexport class Parser {\r\n    private regexSymbol = /^[^\\s()',]+/;\r\n    private regexNumber = /^[-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?/;\r\n    private regexString = /^\"([^\\\\\"]+|\\\\.)*\"/;\r\n    private regexWhiteSpace = /^\\s*/;\r\n    private regexBoolean = /^#t|^#f/;\r\n    private regexComment = /^;.*/;\r\n\r\n    private tokens: Token[];\r\n    private itoken = 0;\r\n\r\n    public parse(st: string): SvCons {\r\n        this.tokens = this.getTokens(st)\r\n            .filter(token => token.kind !== TokenKind.WhiteSpace && token.kind !== TokenKind.Comment);\r\n        var lastToken = this.tokens.length ? this.tokens[this.tokens.length - 1]: null;\r\n        this.tokens.push(lastToken ?\r\n            new Token(TokenKind.EOF, \"\", lastToken.ilineEnd, lastToken.icolEnd + 1) :\r\n            new Token(TokenKind.EOF, \"\", 0,0) );\r\n        this.itoken = 0;\r\n\r\n        var rvs:Sv[] = [];\r\n        while (!this.accept(TokenKind.EOF))\r\n            rvs.push(this.parseExpression());\r\n\r\n        return SvCons.listFromRvArray(rvs);\r\n    }\r\n\r\n    private nextToken() {\r\n        if (this.itoken < this.tokens.length - 1)\r\n            this.itoken++;\r\n    }\r\n\r\n    private currentToken(): Token {\r\n        return this.tokens[this.itoken];\r\n    }\r\n\r\n    private accept(tokenKind: TokenKind) {\r\n        if (this.currentToken().kind === tokenKind) {\r\n\r\n            this.nextToken();\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private expect(tokenKind: TokenKind) {\r\n        if (this.accept(tokenKind))\r\n            return true;\r\n        else\r\n            throw new Error('expected ' + tokenKind + ' found ' + this.currentToken().kind);\r\n    }\r\n\r\n    public parseExpression(): Sv {\r\n        var token = this.currentToken();\r\n\r\n        if (this.accept(TokenKind.Quote)) {\r\n            let svBody = this.parseExpression();\r\n            return new SvCons(new SvSymbol(\"quote\"), svBody).withSourceInfo(token, svBody);\r\n        }\r\n        if (this.accept(TokenKind.Symbol))\r\n            return new SvSymbol(token.st).withSourceInfo(token, token);\r\n        if (this.accept(TokenKind.BooleanLit)) \r\n            return SvBool.fromBoolean(token.st === \"#t\").withSourceInfo(token, token);\r\n        if (this.accept(TokenKind.NumberLit))\r\n            return new SvNumber(eval(token.st)).withSourceInfo(token, token);\r\n        if (this.accept(TokenKind.StringLit))\r\n            return new SvString(eval(token.st)).withSourceInfo(token, token);\r\n        if (this.accept(TokenKind.LParen)) {\r\n            let tokenStart = token;\r\n            let exprs:Sv[] = [];\r\n\r\n            while (!this.accept(TokenKind.RParen)) {\r\n\r\n                if (this.accept(TokenKind.EOF))\r\n                    throw new Error(\"unexpected end of input\");\r\n\r\n                exprs.push(this.parseExpression());\r\n            }\r\n\r\n            let tokenEnd = this.tokens[this.itoken - 1];\r\n            return SvCons.listFromRvArray(exprs).withSourceInfo(tokenStart, tokenEnd);\r\n        }\r\n\r\n        throw new Error(\"invalid token \" + token);\r\n    }\r\n\r\n    private getTokens(st: string): Token[] {\r\n        let tokens: Token[] = [];\r\n        let iline = 0;\r\n        let icol = 0;\r\n        while (st.length > 0) {\r\n            let ch = st[0];\r\n            let token: Token;\r\n\r\n            if (ch === \"(\")\r\n                token = new Token(TokenKind.LParen, ch, iline, icol);\r\n            else if (ch === \")\")\r\n                token = new Token(TokenKind.RParen, ch, iline, icol);\r\n            else if (ch === \"'\")\r\n                token = new Token(TokenKind.Quote, ch, iline, icol);\r\n            else if (this.regexNumber.test(st))\r\n                token = new Token(TokenKind.NumberLit, this.regexNumber.exec(st)[0], iline, icol);\r\n            else if (this.regexString.test(st))\r\n                token = new Token(TokenKind.StringLit, this.regexString.exec(st)[0], iline, icol);\r\n            else if (this.regexBoolean.test(st))\r\n                token = new Token(TokenKind.BooleanLit, this.regexBoolean.exec(st)[0], iline, icol);\r\n            else if (this.regexComment.test(st))\r\n                token = new Token(TokenKind.Comment, this.regexComment.exec(st)[0], iline, icol);\r\n            else if (this.regexSymbol.test(st))\r\n                token = new Token(TokenKind.Symbol, this.regexSymbol.exec(st)[0], iline, icol);\r\n            else if (this.regexWhiteSpace.test(st))\r\n                token = new Token(TokenKind.WhiteSpace, this.regexWhiteSpace.exec(st)[0], iline, icol);\r\n            else\r\n                throw new Error(\"invalid token at '\" + st + \"'\");\r\n            tokens.push(token);\r\n\r\n            if (token.st.length === 0)\r\n                throw new Error(\"invalid token\");\r\n            st = st.substr(token.st.length);\r\n            iline = token.ilineEnd;\r\n            icol = token.icolEnd;\r\n        }\r\n\r\n        return tokens;\r\n    }\r\n\r\n}\r\n\r\nexport interface ISourceInfo {\r\n    ilineStart:number;\r\n    icolStart:number;\r\n    ilineEnd:number;\r\n    icolEnd:number;\r\n}\r\n\r\n\r\n\r\nclass Token implements ISourceInfo {\r\n    public ilineEnd: number;\r\n    public icolEnd: number;\r\n\r\n    constructor(public kind: TokenKind, public st: string,\r\n        public ilineStart: number, public icolStart: number)\r\n    {\r\n        let lines = st.replace(\"\\r\", \"\").split('\\n');\r\n        this.ilineEnd = this.ilineStart + lines.length - 1;\r\n        if (this.ilineStart === this.ilineEnd)\r\n            this.icolEnd = icolStart + lines[0].length;\r\n        else\r\n            this.icolEnd = lines[lines.length-1].length;\r\n    }\r\n}","import { Sv, SvSymbol } from \"./sv\";\r\n\r\nexport class StackFrame {\r\n    constructor(private _sv: Sv, private _env: Env) {}\r\n    public sv(): Sv { return this._sv; }\r\n    public env(): Env { return this._env; }\r\n    public parent(): StackFrame { return this._env.getParentStackFrame(); }\r\n}\r\n\r\nexport class Env {\r\n    private obj: {[id: string] : Sv} = {};\r\n    private envParent: Env = null;\r\n    private svSymbolProcedure: SvSymbol;\r\n    private parentStackFrame: StackFrame;\r\n\r\n    constructor(envParent: Env, svSymbolProcedure: SvSymbol = null, parentStackFrame: StackFrame = null) {\r\n        this.envParent = envParent;\r\n        this.svSymbolProcedure = svSymbolProcedure;\r\n        this.parentStackFrame = parentStackFrame;\r\n    }\r\n\r\n    public getNames(): string[] {\r\n        const res: string[] = [];\r\n        for (let key in this.obj) {\r\n            if (this.obj.hasOwnProperty(key))\r\n                res.push(key);\r\n        }\r\n        return res;\r\n    }\r\n\r\n    public getEnvParent(): Env {\r\n        return this.envParent;\r\n    }\r\n\r\n    public getSvSymbolProcedure(): SvSymbol{\r\n        return this.svSymbolProcedure;\r\n    }\r\n\r\n    public getParentStackFrame(): StackFrame {\r\n        if (this.parentStackFrame)\r\n            return this.parentStackFrame;\r\n        if (this.envParent)\r\n            return this.envParent.getParentStackFrame();\r\n        return null;\r\n    }\r\n\r\n    public get(name: string):Sv {\r\n        if (name in this.obj)\r\n            return this.obj[name];\r\n        if (this.envParent == null)\r\n            throw new Error(\"no binding for \" + name);\r\n        return this.envParent.get(name);\r\n    }\r\n\r\n    public set(name: string, rv: Sv) {\r\n        if (name in this.obj)\r\n            this.obj[name] = rv;\r\n        else if (this.envParent == null)\r\n            throw new Error(name + \" is not declared\");\r\n        else\r\n            this.envParent.set(name, rv);\r\n    }\r\n\r\n    public define(name: string, value: Sv) {\r\n        if (name in this.obj)\r\n            throw new Error(name + ' is already defined');\r\n        this.obj[name] = value;\r\n    }\r\n\r\n    setOrDefine(name: string, value: Sv) {\r\n        this.obj[name] = value; \r\n    }\r\n}","import { Env } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvBreakpoint, SvCons, SvContinuable, SvSymbol } from \"./sv\";\r\n\r\nexport default class BaseEvaluator implements IEvaluator {\r\n    private stepCount: number = 1;\r\n    private step:number = 0 ;\r\n    private evaluators: IEvaluator[];\r\n\r\n    public setEvaluators(evaluators: IEvaluator[]) {\r\n        this.evaluators = evaluators;\r\n    }\r\n\r\n    public setStepCount(stepCount: number) {\r\n        this.stepCount = stepCount;\r\n        this.step = 0;\r\n    }\r\n\r\n    public matches(node: Sv): boolean {\r\n        return true;\r\n    }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n\r\n        for (var i = 0; i < this.evaluators.length;i++) {\r\n            if (this.evaluators[i].matches(sv)) {\r\n                this.step++;\r\n                if (this.step % this.stepCount === 0)\r\n                    return new SvBreakpoint(() => this.evaluators[i].evaluate(sv, env, cont), env).withSourceInfo(sv, sv);\r\n                else\r\n                    return this.evaluators[i].evaluate(sv, env, cont);\r\n\r\n            }\r\n        }\r\n        throw new Error('cannot evaluate ' + sv.toString());\r\n    }\r\n\r\n    public evaluateList(exprs: Sv, env: Env, cont: Cont): Sv {\r\n\r\n        var lastSv: Sv = SvCons.Nil;\r\n        var loop = (exprs: Sv): Sv => {\r\n            if (SvCons.isNil(exprs))\r\n                return new SvContinuable(cont, lastSv);\r\n\r\n            return this.evaluate(SvCons.car(exprs), env, (sv: Sv) => {\r\n                lastSv = sv;\r\n                var nextExprs = SvCons.cdr(exprs);\r\n                return loop(nextExprs);\r\n            });\r\n        };\r\n\r\n        return loop(exprs);\r\n    }\r\n\r\n    public static isTaggedList(node: Sv, tag: string) {\r\n        if (!SvCons.matches(node)) return false;\r\n        var car = SvCons.car(node);\r\n        return SvSymbol.matches(car) && SvSymbol.val(car) === tag;\r\n    }\r\n}","import { StackFrame, Env } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvCons, SvContinuable, SvProcedure } from \"./sv\";\r\nimport BaseEvaluator from \"./base-evaluator\";\r\n\r\nexport default class ApplicationEvaluator implements IEvaluator {\r\n\r\n    constructor(private evaluator: BaseEvaluator) { }\r\n\r\n    public matches(sv: Sv): boolean {\r\n        return SvCons.matches(sv);\r\n    }\r\n\r\n    public static evalCall(operator: Sv, args: Sv, stackFrameCurrent: StackFrame, cont: Cont, evaluator: BaseEvaluator): Sv {\r\n        if (SvProcedure.matches(operator)) {\r\n            return operator.delegate(args, stackFrameCurrent, evaluator, cont);\r\n        } else {\r\n            throw new Error('undefined procedure ' + operator.toString());\r\n        }\r\n    }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n        return this.evaluator.evaluate(ApplicationEvaluator.getOperator(sv), env, (operator: Sv) => {\r\n            if (!SvProcedure.matches(operator)) {\r\n                throw new Error('undefined procedure ' + ApplicationEvaluator.getOperator(sv).toString());\r\n            }\r\n\r\n            return this.evaluateArgs(ApplicationEvaluator.getArguments(sv), env,\r\n                args => ApplicationEvaluator.evalCall(operator, args, new StackFrame(sv, env), cont, this.evaluator));\r\n        });\r\n    }\r\n\r\n    private static getOperator(expr: Sv) { return SvCons.car(expr); }\r\n    private static getArguments(expr: Sv) { return SvCons.cdr(expr); }\r\n\r\n    evaluateArgs(args0: Sv, env: Env, cont: Cont): Sv {\r\n        const evaluatedArgs = new SvCons(null, null);\r\n        const loop = (evaluatedArgsLast: Sv, args: Sv): Sv => {\r\n            if (SvCons.isNil(args)) {\r\n                return new SvContinuable(cont, evaluatedArgs);\r\n            }\r\n            return this.evaluator.evaluate(SvCons.car(args), env, (evaluatedArg: Sv) => {\r\n                SvCons.setCar(evaluatedArgsLast, evaluatedArg);\r\n                SvCons.setCdr(evaluatedArgsLast, new SvCons(null, null));\r\n                return loop(SvCons.cdr(evaluatedArgsLast), SvCons.cdr(args));\r\n            });\r\n        };\r\n        return loop(evaluatedArgs, args0);\r\n    }\r\n}","import { Env } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvCons } from \"./sv\";\r\nimport BaseEvaluator from \"./base-evaluator\";\r\n\r\nexport default class BeginEvaluator implements IEvaluator {\r\n    constructor(private evaluator: BaseEvaluator) { }\r\n\r\n    public matches(node: Sv): boolean {\r\n        return BaseEvaluator.isTaggedList(node, 'begin');\r\n    }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n        return this.evaluator.evaluateList(this.getBeginActions(sv), env, cont);\r\n    }\r\n\r\n    getBeginActions(expr: Sv) { return SvCons.cdr(expr); }\r\n}","import { Env } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvBreakpoint, SvContinuable } from \"./sv\";\r\nimport BaseEvaluator from \"./base-evaluator\";\r\n\r\n    \r\nexport default class BreakpointEvaluator implements IEvaluator {\r\n    \r\n    constructor(private evaluator: BaseEvaluator) { }\r\n    \r\n    public matches(sv: Sv): boolean {\r\n        return SvBreakpoint.matches(sv);\r\n    }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n        return new SvContinuable(cont, SvBreakpoint.cast(sv).val()());\r\n    }\r\n}","import { Env, StackFrame } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvCons, SvSymbol, SvProcedure } from \"./sv\";\r\nimport ApplicationEvaluator from \"./application-evaluator\";\r\nimport BaseEvaluator from \"./base-evaluator\";\r\n\r\nexport default class CallCCEvaluator implements IEvaluator {\r\n\r\n    constructor(private evaluator: BaseEvaluator) { }\r\n    \r\n    public matches(sv: Sv): boolean {\r\n        return BaseEvaluator.isTaggedList(sv, 'call-with-current-continuation');\r\n    }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n        /* (call-with-current-continuation (lambda (hop) ...)) */\r\n        return this.evaluator.evaluate(this.getLambda(sv), env, lambda => {\r\n            var args = SvCons.listFromRvs(CallCCEvaluator.createCcProcedure(cont));\r\n            return ApplicationEvaluator.evalCall(lambda, args, new StackFrame(sv, env), cont, this.evaluator);\r\n        });\r\n    }\r\n\r\n    getLambda(sv: Sv) { return SvCons.cadr(sv); }\r\n\r\n    private static createCcProcedure(cont: Cont): Sv {\r\n        return new SvProcedure(\r\n            new SvSymbol('captured-continuation'),\r\n            (args: Sv) => {\r\n                let arg: Sv = SvCons.Nil;\r\n                if (!SvCons.isNil(args)) {\r\n                    if (!SvCons.isNil(SvCons.cdr(args)))\r\n                        throw new Error('too many arguments');\r\n                    arg = SvCons.car(args);\r\n                }\r\n                return cont(arg);\r\n            }\r\n        );\r\n    }\r\n}","import { Env } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvCons, SvContinuable, SvBool } from \"./sv\";\r\nimport BaseEvaluator from \"./base-evaluator\";\r\n\r\nexport default class CondEvaluator implements IEvaluator {\r\n    constructor(private evaluator: BaseEvaluator) { }\r\n\r\n    public matches(node: Sv): boolean {\r\n        return BaseEvaluator.isTaggedList(node, 'cond');\r\n    }\r\n\r\n    private getCondClauses(cond: Sv) { return SvCons.cdr(cond); }\r\n    private isCondElseClause(clause: Sv) { return BaseEvaluator.isTaggedList(clause, \"else\"); }\r\n    private getCondPredicate(clause: Sv) { return SvCons.car(clause); }\r\n    private getCondActions(clause: Sv) { return SvCons.cdr(clause); }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n\r\n        var loop = (clauses: Sv): Sv => {\r\n            if (SvCons.isNil(clauses))\r\n                return new SvContinuable(cont, clauses);\r\n\r\n            var clause = SvCons.car(clauses);\r\n            if (this.isCondElseClause(clause))\r\n                return this.evaluator.evaluateList(this.getCondActions(clause), env, cont);\r\n\r\n            return this.evaluator.evaluate(SvCons.car(clause), env, (svCond: Sv) => {\r\n                if (SvBool.isTrue(svCond))\r\n                    return this.evaluator.evaluateList(this.getCondActions(clause), env, cont);\r\n                else {\r\n                    var nextClauses = SvCons.cdr(clauses);\r\n                    return loop(nextClauses);\r\n                }\r\n            });\r\n        };\r\n\r\n        var clauses = this.getCondClauses(sv);\r\n        return loop(clauses);\r\n    }\r\n}","import { Env, StackFrame } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvCons, SvSymbol, SvContinuable, SvProcedure } from \"./sv\";\r\nimport BaseEvaluator from \"./base-evaluator\";\r\n\r\nexport default class DefineEvaluator implements IEvaluator {\r\n    constructor(private evaluator: BaseEvaluator) {  }\r\n\r\n    public matches(node: Sv): boolean {\r\n        return BaseEvaluator.isTaggedList(node, 'define');\r\n    }\r\n\r\n    public static makeProc(name: SvSymbol, envClosure: Env, params: Sv, body: Sv ){\r\n        return new SvProcedure(\r\n            name, \r\n            (args: Sv, stackFrame: StackFrame, evaluator: BaseEvaluator, cont: Cont) => {\r\n                const newEnv = new Env(envClosure, name, stackFrame);\r\n                let paramsT = params;\r\n\r\n                while (!SvCons.isNil(args) || !SvCons.isNil(paramsT)) {\r\n                    if (SvCons.isNil(args))\r\n                        throw new Error('not enough argument');\r\n                    if (SvCons.isNil(paramsT))\r\n                        throw new Error('too many arguments');\r\n                    const parameter = SvSymbol.val(SvCons.car(paramsT));\r\n                    const arg = SvCons.car(args);\r\n                    newEnv.define(parameter, arg);\r\n\r\n                    paramsT = SvCons.cdr(paramsT);\r\n                    args = SvCons.cdr(args);\r\n                }\r\n\r\n                return evaluator.evaluateList(body, newEnv, cont);\r\n            }\r\n        );\r\n    }\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n\r\n        if (SvCons.matches(this.getHead(sv))) {\r\n            const name = SvSymbol.cast(this.getFunctionName(sv));\r\n            const lambda = DefineEvaluator.makeProc(\r\n                name, \r\n                env, \r\n                this.getLambdaParameters(sv), \r\n                this.getLambdaBody(sv)\r\n            )\r\n            env.define(name._val, lambda);\r\n            return new SvContinuable(cont, lambda);\r\n        }\r\n        else {\r\n            return this.evaluator.evaluate(this.getValue(sv), env, (svValue: Sv):Sv => {\r\n                env.define(\r\n                    SvSymbol.val(this.getVariable(sv)),\r\n                    svValue);\r\n                return new SvContinuable(cont, svValue);\r\n            });\r\n        }\r\n    }\r\n\r\n    getHead(sv: Sv): Sv { return SvCons.cadr(sv); }\r\n    getVariable(sv: Sv): Sv { return this.getHead(sv); }\r\n    getValue(sv: Sv): Sv { return SvCons.caddr(sv); }\r\n\r\n    getFunctionName(sv: Sv): Sv { return SvCons.car(this.getHead(sv)); }\r\n    getLambdaParameters(sv: Sv) { return SvCons.cdr(this.getHead(sv)); }\r\n    getLambdaBody(sv: Sv) { return SvCons.cddr(sv); }\r\n}","import { Env } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvBool, SvCons } from \"./sv\";\r\nimport BaseEvaluator from \"./base-evaluator\";\r\n\r\nexport default class IfEvaluator implements IEvaluator {\r\n    constructor(private evaluator: BaseEvaluator) {  }\r\n\r\n    public matches(node: Sv): boolean {\r\n        return BaseEvaluator.isTaggedList(node, 'if');\r\n    }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n        return this.evaluator.evaluate(this.getIfPredicate(sv), env, (svCond: Sv) => {\r\n            return SvBool.isTrue(svCond) ?\r\n                this.evaluator.evaluate(this.getIfConsequent(sv), env, cont):\r\n                this.evaluator.evaluate(this.getIfAlternative(sv), env, cont);\r\n        });\r\n    }\r\n\r\n    getIfPredicate(expr: any) { return SvCons.cadr(expr); }\r\n    getIfConsequent(expr: any) { return SvCons.caddr(expr); }\r\n    getIfAlternative(expr: any) { return !SvCons.isNil(SvCons.cdddr(expr)) ? SvCons.cadddr(expr) : SvCons.Nil; }\r\n\r\n}","import { Env } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvSymbol, SvContinuable, SvCons } from \"./sv\";\r\nimport BaseEvaluator from \"./base-evaluator\";\r\nimport DefineEvaluator from \"./define-evaluator\";\r\n\r\nexport default class LambdaEvaluator implements IEvaluator {\r\n    constructor(private evaluator: BaseEvaluator) {  }\r\n\r\n    public matches(node: Sv): boolean {\r\n        return BaseEvaluator.isTaggedList(node, 'lambda');\r\n    }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n        var proc = DefineEvaluator.makeProc(\r\n            new SvSymbol(\"«lambda»\"),\r\n            env, \r\n            LambdaEvaluator.getLambdaParameters(sv),\r\n            LambdaEvaluator.getLambdaBody(sv),\r\n        );\r\n        return new SvContinuable(cont, proc);\r\n    }\r\n\r\n    \r\n    public static getLambdaParameters(expr: Sv) { return SvCons.cadr(expr); }\r\n    public static getLambdaBody(expr: Sv) { return SvCons.cddr(expr); }\r\n\r\n}","import { Env } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvCons, SvSymbol } from \"./sv\";\r\nimport BaseEvaluator from \"./base-evaluator\";\r\n\r\nexport default class LetEvaluator implements IEvaluator {\r\n    constructor(private evaluator: BaseEvaluator) { }\r\n\r\n    public matches(node: Sv): boolean {\r\n        return LetEvaluator.isLet(node) || LetEvaluator.isLetStar(node) || LetEvaluator.isLetrec(node);\r\n    }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n\r\n        if (LetEvaluator.isLet(sv)) {\r\n            const loop = (letEnv: Env, defs: Sv): Sv => {\r\n                if (SvCons.isNil(defs)) \r\n                    return this.evaluator.evaluateList(LetEvaluator.getBody(sv), letEnv, cont);\r\n                \r\n                const def = SvCons.car(defs);\r\n                const svSymbol = SvCons.car(def);\r\n                return this.evaluator.evaluate(SvCons.cadr(def), env, (svValue) => {\r\n                    letEnv.define(SvSymbol.val(svSymbol), svValue);\r\n                    return loop(letEnv, SvCons.cdr(defs));\r\n                });\r\n            };\r\n            return loop(new Env(env), LetEvaluator.getDefs(sv));\r\n\r\n        }\r\n        else if (LetEvaluator.isLetStar(sv)) {\r\n            const loop = (letEnv:Env, defs: Sv): Sv => {\r\n                if (SvCons.isNil(defs)) \r\n                    return this.evaluator.evaluateList(LetEvaluator.getBody(sv), letEnv, cont);\r\n                \r\n                const def = SvCons.car(defs);\r\n                const svSymbol = SvCons.car(def);\r\n                return this.evaluator.evaluate(SvCons.cadr(def), letEnv, (svValue) => {\r\n                    letEnv = new Env(letEnv);\r\n                    letEnv.setOrDefine(SvSymbol.val(svSymbol), svValue);\r\n                    return loop(letEnv, SvCons.cdr(defs));\r\n                });\r\n            };\r\n            return loop(env, LetEvaluator.getDefs(sv));\r\n        }\r\n        else if (LetEvaluator.isLetrec(sv)) {\r\n            const newEnv = new Env(env); \r\n            let defsT = LetEvaluator.getDefs(sv);\r\n            while (!SvCons.isNil(defsT)) {\r\n                const def = SvCons.car(defsT);\r\n                newEnv.define(SvSymbol.val(SvCons.car(def)), SvCons.Nil);\r\n                defsT = SvCons.cdr(defsT);\r\n            }\r\n\r\n            const loop = (letEnv: Env, defs: Sv): Sv => {\r\n                if (SvCons.isNil(defs))\r\n                    return this.evaluator.evaluateList(LetEvaluator.getBody(sv), letEnv, cont);\r\n                \r\n                const def = SvCons.car(defs);\r\n                const svSymbol = SvCons.car(def);\r\n                return this.evaluator.evaluate(SvCons.cadr(def), letEnv, (svValue) => {\r\n                    letEnv.set(SvSymbol.val(svSymbol), svValue);\r\n                    return loop(letEnv, SvCons.cdr(defs));\r\n                });\r\n            };\r\n\r\n            return loop(newEnv, LetEvaluator.getDefs(sv));\r\n        }\r\n        else\r\n            throw new Error('uknown let kind');\r\n\r\n        \r\n    }\r\n\r\n    static isLet(node: Sv): boolean { return BaseEvaluator.isTaggedList(node, 'let'); }\r\n    static isLetStar(node: Sv): boolean { return BaseEvaluator.isTaggedList(node, 'let*'); }\r\n    static isLetrec(node: Sv): boolean { return BaseEvaluator.isTaggedList(node, 'letrec'); }\r\n\r\n    static getDefs(sv: Sv) {\r\n        return SvCons.cadr(sv);\r\n    }\r\n\r\n    static getBody(sv: Sv): Sv { return SvCons.cddr(sv); }\r\n}","import { Env } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvCons, SvContinuable } from \"./sv\";\r\nimport BaseEvaluator from \"./base-evaluator\";\r\n\r\nexport default class QuoteEvaluator implements IEvaluator {\r\n    constructor(private evaluator: BaseEvaluator) { }\r\n    public matches(node: Sv): boolean {\r\n        return BaseEvaluator.isTaggedList(node, 'quote');\r\n    }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n        var res = SvCons.cdr(sv);\r\n        return new SvContinuable(cont, res);\r\n    }\r\n}","import { Env } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvString, SvBool, SvNumber, SvCons, SvContinuable } from \"./sv\";\r\n\r\nexport default class SelfEvaluator implements IEvaluator {\r\n    public matches(node: Sv): boolean {\r\n        return SvString.matches(node) || SvBool.matches(node) ||\r\n            SvNumber.matches(node) || SvCons.isNil(node);\r\n    }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n        return new SvContinuable(cont, sv);\r\n    }\r\n}","import { Env } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvSymbol, SvContinuable } from \"./sv\";\r\n\r\nexport default class VariableEvaluator implements IEvaluator {\r\n    public matches(node: Sv): boolean {\r\n        return SvSymbol.matches(node);\r\n    }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n        var res = env.get(SvSymbol.val(sv));\r\n        return new SvContinuable(cont, res);\r\n    }\r\n}","import { Env } from \"./env\";\r\nimport { IEvaluator, Cont } from \"./ievaluator\";\r\nimport { Sv, SvSymbol, SvContinuable, SvCons } from \"./sv\";\r\nimport BaseEvaluator from \"./base-evaluator\";\r\n\r\nexport default class AssignmentEvaluator implements IEvaluator {\r\n    constructor(private evaluator: BaseEvaluator) {  }\r\n\r\n    public matches(sv: Sv): boolean {\r\n        return BaseEvaluator.isTaggedList(sv, 'set!');\r\n    }\r\n\r\n    public evaluate(sv: Sv, env: Env, cont: Cont): Sv {\r\n\r\n        return this.evaluator.evaluate(this.getValue(sv), env, (svValue) => {\r\n            env.set(\r\n                SvSymbol.val(this.getVariable(sv)),\r\n                svValue);\r\n            return new SvContinuable(cont, svValue);\r\n        });\r\n    }\r\n\r\n    getVariable(node: Sv): Sv { return SvCons.cadr(node); }\r\n    getValue(node: Sv): Sv { return SvCons.caddr(node); }\r\n}","import { Env } from \"./env\";\r\nimport { Parser } from \"./parser\";\r\nimport { SvCons, SvSymbol, SvBool, SvNumber, Sv, SvBreakpoint, SvContinuable, SvProcedure } from \"./sv\";\r\nimport BaseEvaluator from \"./base-evaluator\";\r\nimport ApplicationEvaluator from \"./application-evaluator\";\r\nimport BeginEvaluator from \"./begin-evaluator\";\r\nimport BreakpointEvaluator from \"./breakpoint-evaluator\";\r\nimport CallCCEvaluator from \"./call-cc-evaluator\";\r\nimport CondEvaluator from \"./cond-evaluator\";\r\nimport DefineEvaluator from \"./define-evaluator\";\r\nimport IfEvaluator from \"./if-evaluator\";\r\nimport LambdaEvaluator from \"./lambda-evaluator\";\r\nimport LetEvaluator from \"./let-evaluator\";\r\nimport QuoteEvaluator from \"./quote-evaluator\";\r\nimport SelfEvaluator from \"./self-evaluator\";\r\nimport VariableEvaluator from \"./variable-evaluator\";\r\nimport AssignmentEvaluator from \"./assignment-evaluator\";\r\n\r\nexport class Interpreter {\r\n\r\n    private evaluator: BaseEvaluator;\r\n\r\n    public evaluateString(st: string, log: (st: string) => void) {\r\n        let parser = new Parser();\r\n        let exprs = parser.parse(st);\r\n        let env = new Env(null);\r\n\r\n        const makeProc = (name: string, body: (args: Sv) => Sv) => {\r\n            env.define(name,\r\n                new SvProcedure(\r\n                    new SvSymbol(name),\r\n                    (args, _, __, cont) => {\r\n                        return new SvContinuable(cont, body(args))\r\n                    }\r\n                ));\r\n        };\r\n\r\n        makeProc('cons', (args: Sv) => new SvCons(SvCons.car(args), SvCons.cadr(args)));\r\n        makeProc('null?', (args: Sv) => SvBool.fromBoolean(SvCons.isNil(SvCons.car(args))));\r\n        makeProc('car', (args: Sv) => SvCons.car(SvCons.car(args)));\r\n        makeProc('cadr', (args: Sv) => SvCons.cadr(SvCons.car(args)));\r\n        makeProc('cdr', (args: Sv) => SvCons.cdr(SvCons.car(args)));\r\n        makeProc('=', (args: Sv) => SvBool.fromBoolean(SvNumber.val(SvCons.car(args)) === SvNumber.val(SvCons.cadr(args))));\r\n        makeProc('>', (args: Sv) => SvBool.fromBoolean(SvNumber.val(SvCons.car(args)) > SvNumber.val(SvCons.cadr(args))));\r\n        makeProc('<', (args: Sv) => SvBool.fromBoolean(SvNumber.val(SvCons.car(args)) < SvNumber.val(SvCons.cadr(args))));\r\n        makeProc('*', (args: Sv) => new SvNumber(SvNumber.val(SvCons.car(args)) * SvNumber.val(SvCons.cadr(args))));\r\n        makeProc('-', (args: Sv) => new SvNumber(SvNumber.val(SvCons.car(args)) - SvNumber.val(SvCons.cadr(args))));\r\n        makeProc('+', (args: Sv) => new SvNumber(SvNumber.val(SvCons.car(args)) + SvNumber.val(SvCons.cadr(args))));\r\n        makeProc('/', (args: Sv) => new SvNumber(SvNumber.val(SvCons.car(args)) / SvNumber.val(SvCons.cadr(args))));\r\n        makeProc('min', (args: Sv) => new SvNumber(Math.min(SvNumber.val(SvCons.car(args)), SvNumber.val(SvCons.cadr(args)))));\r\n        makeProc('max', (args: Sv) => new SvNumber(Math.max(SvNumber.val(SvCons.car(args)), SvNumber.val(SvCons.cadr(args)))));\r\n        makeProc('abs', (args: Sv) => new SvNumber(Math.abs(SvNumber.val(SvCons.car(args)))));\r\n        makeProc('zero?', (args: Sv) => SvBool.fromBoolean(SvNumber.val(SvCons.car(args)) === 0));\r\n        makeProc('length', (args: Sv) => SvCons.lengthI(SvCons.car(args)));\r\n        makeProc('not', (args: Sv) => SvBool.not(SvCons.car(args)));\r\n        makeProc('and', (args: Sv) => SvBool.and(args));\r\n        makeProc('or', (args: Sv) => SvBool.or(args));\r\n        makeProc('display', (args: Sv) => {\r\n            while (!SvCons.isNil(args)) {\r\n                log(SvCons.car(args).toDisplayString());\r\n                args = SvCons.cdr(args);\r\n            }\r\n            return SvCons.Nil;\r\n        });\r\n\r\n        makeProc('ask', (args: Sv) => {\r\n            let msg = \"\";\r\n            while (!SvCons.isNil(args)) {\r\n                msg += SvCons.car(args).toDisplayString();\r\n                args = SvCons.cdr(args);\r\n            }\r\n\r\n            log(\"> \" + msg + \" \");\r\n            const answer = parseInt(prompt(msg), 10);\r\n            log(answer + \"\\n\");\r\n            return new SvNumber(answer);\r\n        });\r\n\r\n        this.evaluator = new BaseEvaluator();\r\n        this.evaluator.setEvaluators([\r\n            new BreakpointEvaluator(this.evaluator),\r\n            new SelfEvaluator(),\r\n            new VariableEvaluator(),\r\n            new LetEvaluator(this.evaluator),\r\n            new QuoteEvaluator(this.evaluator),\r\n            new CondEvaluator(this.evaluator),\r\n            new DefineEvaluator(this.evaluator),\r\n            new AssignmentEvaluator(this.evaluator),\r\n            new IfEvaluator(this.evaluator),\r\n            new BeginEvaluator(this.evaluator),\r\n            new LambdaEvaluator(this.evaluator),\r\n            new CallCCEvaluator(this.evaluator),\r\n            new ApplicationEvaluator(this.evaluator)\r\n        ]);\r\n\r\n        return this.evaluator.evaluateList(exprs, new Env(env), sv => {\r\n            //log(sv.toString());\r\n            return sv;\r\n        });\r\n    }\r\n\r\n    public step(sv: Sv, stepCount: number): Sv {\r\n\r\n        this.evaluator.setStepCount(stepCount);\r\n\r\n        if (SvBreakpoint.matches(sv)) {\r\n            sv = sv.val()();\r\n            while (SvContinuable.matches(sv))\r\n                sv = SvContinuable.call(sv);\r\n        }\r\n\r\n        return SvBreakpoint.matches(sv) ? sv : null;\r\n    }\r\n\r\n}","import { StackFrame } from \"../lang/env\";\nimport { Sv, SvBreakpoint } from \"../lang/sv\";\n\nexport type DebuggerState = {\n    kind: \"stopped\"\n} | {\n    kind: \"running\" | \"step\",\n    sv: Sv\n} | {\n    kind: \"paused\",\n    sv: SvBreakpoint,\n    currentStackFrameIndex: number\n};\n\nexport function getCurrentStackFrame(debuggerState: DebuggerState): StackFrame {\n    if (debuggerState.kind !== \"paused\") {\n        return null;\n    }\n\n    let stackFrame = new StackFrame(debuggerState.sv, debuggerState.sv.env());\n    for (let i = 0; stackFrame && i < debuggerState.currentStackFrameIndex; i++) {\n        stackFrame = stackFrame.parent();\n    }\n    return stackFrame;\n}\n","import React from 'react';\n\nexport type SampleProps = {\n    samples: string[],\n    onSampleSelected: (index: number) => void;\n}\n\nexport const Samples: React.FC<SampleProps> = (props: SampleProps) => {\n\n    const options = props.samples.map(sample => {\n        let text = sample.split('\\n')[0].trim().replace(/^; /, '');\n        return <option key={sample}>{text}</option>\n    });\n\n    const onChange: React.ChangeEventHandler<HTMLSelectElement> = (event) => {\n        props.onSampleSelected(event.target.selectedIndex);\n    };\n    return <select\n        className=\"sicp-editor-select-sample\"\n        onChange={onChange}>\n        {options}\n    </select>\n}\n","import React from 'react';\nimport { SampleProps, Samples } from \"./samples\";\n\nexport type ToolbarProps = SampleProps & {\n    onRun?: () => void;\n    onPause?: () => void;\n    onStop?: () => void;\n    onStep?: () => void;\n    onContinue?: () => void;\n}\n\nexport const Toolbar: React.FC<ToolbarProps> = (props) => {\n    return <div className=\"sicp-editor-toolbar\">\n        {props.onRun && <button className=\"sicp-editor-button\" onClick={props.onRun}>run</button>}\n        {props.onPause && <button className=\"sicp-editor-button\" onClick={props.onPause}>pause</button>}\n        {props.onStop && <button className=\"sicp-editor-button\" onClick={props.onStop}>stop</button>}\n        {props.onStep && <button className=\"sicp-editor-button\" onClick={props.onStep}>step</button>}\n        {props.onContinue && <button className=\"sicp-editor-button\" onClick={props.onContinue}>continue</button>}\n        <Samples samples={props.samples} onSampleSelected={props.onSampleSelected} />\n    </div>\n}\n","import React from 'react';\nimport { DebuggerState, getCurrentStackFrame } from \"./debugger-state\";\n\nexport type ScopesProps = {\n    debuggerState: DebuggerState,\n}\n\nexport const Scopes: React.FC<ScopesProps> = (props) => {\n\n    const debuggerState = props.debuggerState;\n    let stackFrame = getCurrentStackFrame(debuggerState)\n    if (stackFrame == null) {\n        return <div className=\"sicp-stack-frame\"><p>not paused</p></div>;\n    }\n\n    let env = stackFrame.env();\n    let scopes: React.ReactElement[] = [];\n    while (env) {\n        //                 $(pTitle).click(() => { $(divScope).toggleClass('sicp-tree-node-collapsed'); });\n\n        scopes.push(<div>\n            <p className=\"sicp-tree-node-title\">Scope</p>\n            {env.getNames().length > 0 &&\n                <div className=\"sicp-tree-node-content\">\n                    {\n                        env.getNames().map(name =>\n                            <div key={name}>\n                                <div className=\"sicp-variable-name\">{name}</div>\n                                <div className=\"sicp-variable-value\">{env.get(name).toDisplayString()}</div>\n                            </div>\n                        )\n                    }\n                </div>\n            }\n            {env.getNames().length === 0 && <p className=\"sicp-scope-empty\">«empty»</p>}\n        </div>\n        );\n        env = env.getEnvParent();\n    }\n    return <div>{scopes}</div>\n}","import React from 'react';\nimport { StackFrame } from \"../lang/env\";\nimport { SvBreakpoint } from \"../lang/sv\";\nimport { DebuggerState } from \"./debugger-state\";\n\nexport type StacktraceProps = {\n    debuggerState: DebuggerState,\n    onStackFrameSelect: (i: number) => void\n}\n\nexport const Stacktrace: React.FC<StacktraceProps> = (props) => {\n    const debuggerState = props.debuggerState;\n    if (debuggerState.kind !== \"paused\" || !SvBreakpoint.matches(debuggerState.sv)) {\n        return  <div className=\"sicp-stack-frame\">\n            <p>not paused</p>\n        </div>;\n    }\n\n    const sv = debuggerState.sv;\n    let stackFrame = new StackFrame(sv, sv.env());\n    let stackFrameIndex = 0;\n    let frameElements: React.ReactElement[] = [];\n    while (stackFrame) {\n        const currentStackFrame = stackFrameIndex;\n        let env = stackFrame.env();\n        while (env != null && env.getSvSymbolProcedure() == null)\n            env = env.getEnvParent();\n\n        let msg = \"(«lambda»)\";\n        if (env != null){\n            msg = '('+env.getSvSymbolProcedure().toString();\n            for(let param of env.getNames()) {\n                msg += ' ' + env.get(param).toString()\n            }\n            msg += ')'\n        }\n        const classes = 'sicp-stack-frame ' + ((currentStackFrame === debuggerState.currentStackFrameIndex) ? 'sicp-stack-frame-current' : '');\n        frameElements.push(\n            <div className={classes} key={stackFrameIndex} onClick={() => props.onStackFrameSelect(currentStackFrame)}>\n                <p>{msg}</p>\n            </div>\n        );\n        stackFrame = stackFrame.parent();\n        stackFrameIndex++;\n    }\n\n    return <div>{frameElements}</div>;\n}","export default class Logger {\n    output: string;\n    clear() {\n        this.output = \"\";\n    }\n    log = (st: string) => {\n        this.output += st;\n    }\n}\n","import React from 'react';\nexport type NewLineTextProps = {\n    text: string\n}\n\nexport const NewLineText: React.FC<NewLineTextProps> = (props) => {\n    if(!props.text) {\n        return <div/>;\n    }\n\n    const text = props.text;\n    const newText = text.split('\\n').map(str => <div>{str}</div>);\n    return <div>{newText}</div>;\n}\n","import React from 'react';\nimport AceEditor from \"react-ace\";\n\nimport \"brace/mode/typescript\";\nimport \"brace/theme/tomorrow_night\";\nimport { Interpreter } from '../lang/interpreter';\nimport { SvBreakpoint } from '../lang/sv';\nimport { IMarker } from 'react-ace/lib/types';\nimport { DebuggerState, getCurrentStackFrame } from './debugger-state';\nimport { Toolbar } from './toolbar';\nimport { Scopes } from './scopes';\nimport { Stacktrace } from './stacktrace';\nimport Logger from './logger';\nimport { NewLineText } from './new-line-text';\n\nexport type EditorProps = {\n    sampleUrls: string[]\n}\n\nexport type EditorState = {\n    samples: string[];\n    program: string;\n    currentSampleIndex: number;\n    logger: Logger;\n    interpreter: Interpreter;\n    debuggerState: DebuggerState;\n    editorRef: React.RefObject<AceEditor>;\n}\n\nexport class Editor extends React.PureComponent<EditorProps, EditorState> {\n    constructor(props: EditorProps) {\n        super(props);\n\n        this.state = {\n            program: '',\n            samples: [],\n            currentSampleIndex: 0,\n            logger: new Logger(),\n            interpreter: new Interpreter(),\n            debuggerState: { kind: \"stopped\" },\n            editorRef: React.createRef()\n        }\n\n        const fetchSamples = async () => {\n            const samples: string[] = [];\n            for (let url of props.sampleUrls) {\n                const response = await fetch(url);\n                samples.push(await response.text());\n            }\n            return samples;\n        }\n        fetchSamples().then(\n            (samples) => {\n                this.setState({ samples: samples });\n                this.setSampleIndex(0);\n            }\n        );\n    }\n\n    setSampleIndex = (index: number) => {\n        this.stop();\n        this.setState({\n            program: this.state.samples[index] ?? \"\",\n            currentSampleIndex: index,\n        });\n    };\n\n    run = () => {\n        this.setState({ debuggerState: { kind: \"running\", sv: null } });\n    }\n\n    stop = () => {\n        if (this.state.debuggerState.kind !== \"stopped\") {\n            this.setState({ debuggerState: { kind: \"stopped\" } });\n        }\n    };\n\n    step = () => {\n        const { debuggerState } = this.state;\n        if (debuggerState.kind === \"paused\") {\n            this.stepInterpreter({ ...this.state, debuggerState: { ...debuggerState, kind: \"step\" } });\n        } else if (debuggerState.kind === \"stopped\") {\n            this.stepInterpreter({ ...this.state, debuggerState: { kind: \"step\", sv: null } });\n        }\n    };\n\n    cont = () => {\n        const { debuggerState } = this.state;\n        if (debuggerState.kind === \"paused\") {\n            this.setState({ debuggerState: { ...debuggerState, kind: \"running\" } });\n        }\n    };\n\n    pause = () => {\n        const { debuggerState } = this.state;\n\n        if (debuggerState.kind === \"running\" && SvBreakpoint.matches(debuggerState.sv)) {\n            this.setState({\n                debuggerState: {\n                    kind: \"paused\",\n                    sv: debuggerState.sv,\n                    currentStackFrameIndex: 0\n                }\n            });\n        }\n    };\n\n    setStackFrameIndex = (index: number) => {\n        const { debuggerState } = this.state;\n        if (debuggerState.kind === \"paused\") {\n            this.setState({\n                debuggerState: { ...debuggerState, kind: \"paused\", currentStackFrameIndex: index }\n            });\n        }\n    };\n\n    edit = (program: string) => {\n        this.stop();\n        this.setState({ program });\n    }\n\n    stepInterpreter = (state: EditorState) => {\n        const { debuggerState, interpreter, logger, program } = state;\n\n        if (debuggerState.kind === \"running\" || debuggerState.kind === \"step\") {\n            try {\n                let sv = debuggerState.sv;\n                if (sv == null) {\n                    this.stop();\n                    logger.clear();\n                    sv = interpreter.evaluateString(program, logger.log);\n                } else {\n                    sv = interpreter.step(debuggerState.sv, debuggerState.kind === \"running\" ? 10000 : 1);\n                }\n\n                if (sv == null) {\n                    this.setState({ debuggerState: { kind: \"stopped\" } });\n                } else if (debuggerState.kind === \"running\") {\n                    this.setState({ debuggerState: { kind: \"running\", sv } });\n                } else if (SvBreakpoint.matches(sv)) {\n                    this.setState({ debuggerState: { kind: \"paused\", sv, currentStackFrameIndex: 0 } });\n                } else {\n                    this.setState({ debuggerState: { kind: \"stopped\" } });\n                }\n            } catch (ex) {\n                console.log(ex);\n                logger.log(\"\\n\" + ex);\n                this.setState({ debuggerState: { kind: \"stopped\" } });\n            }\n        }\n    }\n\n    render() {\n        const { samples, debuggerState, editorRef, logger, program } = this.state;\n\n        if (debuggerState.kind === \"running\" || debuggerState.kind === \"step\") {\n            setTimeout(() => this.stepInterpreter(this.state), 0);\n        }\n\n        const markers: IMarker[] = [];\n\n        const stackFrame = getCurrentStackFrame(debuggerState);\n        if (debuggerState.kind === \"paused\" && stackFrame != null) {\n            markers.push({\n                startRow: stackFrame.sv().ilineStart,\n                endRow: stackFrame.sv().ilineEnd,\n                startCol: stackFrame.sv().icolStart,\n                endCol: stackFrame.sv().icolEnd,\n                className: \"current-statement\",\n                type: \"text\"\n            });\n            editorRef.current?.editor.gotoLine(stackFrame.sv().ilineStart);\n        }\n\n        return (\n            <div id=\"editor-wrap\">\n                <div id=\"editor\">\n                    <Toolbar\n                        samples={samples}\n                        onSampleSelected={this.setSampleIndex}\n                        onRun={debuggerState.kind === \"stopped\" ? this.run : null}\n                        onStop={debuggerState.kind === \"paused\" || debuggerState.kind === \"running\" ? this.stop : null}\n                        onPause={debuggerState.kind === \"running\" ? this.pause : null}\n                        onStep={debuggerState.kind === \"paused\" || debuggerState.kind === \"stopped\" ? this.step : null}\n                        onContinue={debuggerState.kind === \"paused\" ? this.cont : null}\n                    />\n                    <AceEditor\n                        ref={editorRef}\n                        onChange={this.edit}\n                        className=\"editorWindow\"\n                        mode=\"typescript\"\n                        theme=\"tomorrow_night\"\n                        name=\"ace-editor\"\n                        editorProps={{ $blockScrolling: false }}\n                        value={program}\n                        showGutter={true}\n                        width=\"auto\"\n                        height=\"auto\"\n                        markers={markers}\n                    />\n                </div>\n                <div id=\"editor-bottom\">\n                    <div className=\"sicp-box\">\n                        <p className=\"sicp-box-tab-title\">Output</p>\n                        <div id=\"output-content\" className=\"sicp-box-tab-content\"><NewLineText text={logger.output} /></div>\n                    </div>\n                    <div className=\"sicp-box\">\n                        <p className=\"sicp-box-tab-title\">Call Stack</p>\n                        <div id=\"stacktrace-content\" className=\"sicp-box-tab-content\">\n                            <Stacktrace debuggerState={debuggerState} onStackFrameSelect={this.setStackFrameIndex} />\n                        </div>\n                    </div>\n                    <div className=\"sicp-box\">\n                        <p className=\"sicp-box-tab-title\">Variables</p>\n                        <div id=\"variables-content\" className=\"sicp-box-tab-content\">\n                            <Scopes debuggerState={debuggerState} />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport \"./App.css\";\nimport {Editor} from './editor/editor';\n\nconst samples = [\n    'samples/factorial.ms',\n    'samples/odd-or-even.ms',\n    'samples/counting-change.ms',\n    'samples/hanoi.ms',\n    'samples/n-queens.ms',\n    'samples/return-with-callcc.ms',\n    'samples/lazy-generator.ms',\n    'samples/yin-yang.ms'\n]\n\nfunction App() {\n    return (\n        <>\n            <div id=\"header\">\n                <h2>Mini scheme</h2>\n                <p>by <a href=\"https://csokavar.hu\">encse</a></p>\n            </div>\n            <Editor sampleUrls={samples}/>\n            <div id=\"footer\">Copyright 2015, source is available on <a href=\"https://github.com/encse/sicp\">GitHub</a></div>\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}